#!/usr/bin/env bash

main() {
  [[ $# -lt 1 ]] && help && return 1

  local input_content
  if [[ -p /dev/stdin ]]; then
    input_content=$(cat /dev/stdin)
  fi

  local filepathes=()
  for arg in "${@}"; do
    [[ -f $arg ]] && filepathes=("${filepathes[@]}" "$arg")
  done

  local diff_cmd
  local input_file
  local filter_cmd='cat'
  if type >/dev/null 2>&1 delta; then
    filter_cmd='delta'
    output_file="-"
    # part
    diff_cmd=(diff -u)
    # whole
    [[ -n $SEDRY_WHOLE_FILE ]] && diff_cmd=(diff -u --suppress-common-lines)
  elif type >/dev/null 2>&1 icdiff; then
    # part
    output_file="/dev/stdin"
    diff_cmd=(icdiff -U 1 --line-numbers --show-all-spaces)
    # whole
    [[ -n $SEDRY_WHOLE_FILE ]] && diff_cmd=(icdiff -U 1 --line-numbers --show-all-spaces -W)
  elif type >/dev/null 2>&1 colordiff; then
    output_file="-"
    # part
    diff_cmd=(colordiff -y --left-column)
    # whole
    [[ -n $SEDRY_WHOLE_FILE ]] && diff_cmd=(colordiff -y --left-column --suppress-common-lines)
  else
    output_file="-"
    # part
    diff_cmd=(diff -y --left-column)
    # whole
    [[ -n $SEDRY_WHOLE_FILE ]] && diff_cmd=(diff -y --left-column --suppress-common-lines)
  fi

  {
    if [[ -z $input_content ]]; then
      ${SEDRY_SED:-sed} "$@" | "${diff_cmd[@]}" <(cat "${filepathes[@]}") "$output_file"
    else
      printf '%s' "$input_content" | ${SEDRY_SED:-sed} "$@" | "${diff_cmd[@]}" <(printf '%s' "$input_content") "$output_file"
    fi
  } | "$filter_cmd"
}

help() {
  cat <<EOF
$0 [sed options]

WARN: don't add -i option

ENV
SEDRY_SED=gsed     : if you use Mac OS X and you have gsed
SEDRY_WHOLE_FILE=1 : show the whole file instead of just changed lines and context

e.g.
$0 -e 's/hoge/fuga/g' README.md
cat README.md | $0 -e 's/hoge/fuga/g'
EOF

  exit 1
}

main "$@"
